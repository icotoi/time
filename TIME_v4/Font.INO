static const unsigned char FontLookup [][6] PROGMEM = { 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b01010000, 0b11111000, 0b11111000, 0b01110000, 0b00100000, 5},// 3
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b10000000, 0b10000000, 0b10000000, 0b00000000, 0b10000000, 1},// 33
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b01010000, 0b11111000, 0b01010000, 0b11111000, 0b01010000, 5},// 35
    {0b10101101, 0b10101001, 0b10101101, 0b10100101, 0b11101101, 8},// 36
    {0b10100000, 0b00100000, 0b01000000, 0b10000000, 0b10100000, 3},// 37
    {0b01100000, 0b10010000, 0b01100000, 0b10011000, 0b01110000, 5},// 38
    {0b01000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 1},// 39
    {0b01000000, 0b10000000, 0b10000000, 0b10000000, 0b01000000, 2},// 40
    {0b10000000, 0b01000000, 0b01000000, 0b01000000, 0b10000000, 2},// 41
    {0b00000000, 0b01010000, 0b11111000, 0b01010000, 0b00000000, 5},// 42
    {0b00000000, 0b01000000, 0b11100000, 0b01000000, 0b00000000, 3},// 43
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b11100000, 0b00000000, 0b00000000, 3},// 45
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00100000, 0b00100000, 0b01000000, 0b10000000, 0b10000000, 3},// 47
    {0b11100000, 0b10100000, 0b10100000, 0b10100000, 0b11100000, 3},// 48
    {0b01000000, 0b11000000, 0b01000000, 0b01000000, 0b11100000, 3},// 49
    {0b11100000, 0b00100000, 0b11100000, 0b10000000, 0b11100000, 3},// 50
    {0b11100000, 0b00100000, 0b11100000, 0b00100000, 0b11100000, 3},// 51
    {0b10100000, 0b10100000, 0b11100000, 0b00100000, 0b00100000, 3},// 52
    {0b11100000, 0b10000000, 0b11100000, 0b00100000, 0b11100000, 3},// 53
    {0b11100000, 0b10000000, 0b11100000, 0b10100000, 0b11100000, 3},// 54
    {0b11100000, 0b00100000, 0b00100000, 0b00100000, 0b00100000, 3},// 55
    {0b11100000, 0b10100000, 0b11100000, 0b10100000, 0b11100000, 3},// 56
    {0b11100000, 0b10100000, 0b11100000, 0b00100000, 0b11100000, 3},// 57
    {0b00000000, 0b10000000, 0b00000000, 0b10000000, 0b00000000, 1},// 58
    {0b00000000, 0b01000000, 0b00000000, 0b01000000, 0b10000000, 2},// 59
    {0b00100000, 0b01000000, 0b10000000, 0b01000000, 0b00100000, 3},// 60
    {0b00000000, 0b11100000, 0b00000000, 0b11100000, 0b00000000, 3},// 61
    {0b10000000, 0b01000000, 0b00100000, 0b01000000, 0b10000000, 3},// 62
    {0b11100000, 0b00100000, 0b01100000, 0b00000000, 0b01000000, 3},// 63
    {0b11111111, 0b10001000, 0b10001101, 0b10101101, 0b11111111, 8},// 64
    {0b11100000, 0b10100000, 0b11100000, 0b10100000, 0b10100000, 3},// 65
    {0b11000000, 0b10100000, 0b11000000, 0b10100000, 0b11100000, 3},// 66
    {0b11100000, 0b10000000, 0b10000000, 0b10000000, 0b11100000, 3},// 67
    {0b11000000, 0b10100000, 0b10100000, 0b10100000, 0b11000000, 3},// 68
    {0b11100000, 0b10000000, 0b11100000, 0b10000000, 0b11100000, 3},// 69
    {0b11100000, 0b10000000, 0b11100000, 0b10000000, 0b10000000, 3},// 70
    {0b01100000, 0b10000000, 0b10110000, 0b10010000, 0b01100000, 4},// 71
    {0b10100000, 0b10100000, 0b11100000, 0b10100000, 0b10100000, 3},// 72
    {0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b10000000, 1},// 73
    {0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b11000000, 2},// 74
    {0b10100000, 0b10100000, 0b11000000, 0b10100000, 0b10100000, 3},// 75
    {0b10000000, 0b10000000, 0b10000000, 0b10000000, 0b11100000, 3},// 76
    {0b10001000, 0b11011000, 0b10101000, 0b10001000, 0b10001000, 5},// 77
    {0b10010000, 0b11010000, 0b10110000, 0b10010000, 0b10010000, 4},// 78
    {0b01100000, 0b10010000, 0b10010000, 0b10010000, 0b01100000, 4},// 79
    {0b11100000, 0b10100000, 0b11100000, 0b10000000, 0b10000000, 3},// 80
    {0b01100000, 0b10010000, 0b10010000, 0b10110000, 0b01110000, 4},// 81
    {0b11000000, 0b10100000, 0b11000000, 0b10100000, 0b10100000, 3},// 82
    {0b01100000, 0b10000000, 0b11100000, 0b00100000, 0b11000000, 3},// 83
    {0b11100000, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 3},// 84
    {0b10100000, 0b10100000, 0b10100000, 0b10100000, 0b11100000, 3},// 85
    {0b10100000, 0b10100000, 0b10100000, 0b10100000, 0b01000000, 3},// 86
    {0b10001000, 0b10101000, 0b10101000, 0b10101000, 0b01010000, 5},// 87
    {0b10100000, 0b10100000, 0b01000000, 0b10100000, 0b10100000, 3},// 88
    {0b10100000, 0b10100000, 0b11100000, 0b01000000, 0b01000000, 3},// 89
    {0b11100000, 0b00100000, 0b01000000, 0b10000000, 0b11100000, 3},// 90
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0},// CHARACTER UNDEFINED 
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11110000, 4},// 95
}; 

// Draw an horizontal line to screen display
void PutHLine2ScreenBuffer(int posX, char lineYpos, char lineLenght, unsigned char line)
{   
    for (int byte_counter = 0; byte_counter < lineLenght; byte_counter++) { 
        if (line & 0x80) {
            set_pixel(posX + byte_counter, lineYpos);
        }
        else {
            clear_pixel(posX + byte_counter, lineYpos);
        }
	line <<= 1;
    }  
}

// Returns the new position of cursor on the display
// where to print a new character after printing the 
// actual character
int put_char(int displayXpos, unsigned int unicodeIndex)
{ 
    unsigned int characterWidth;
    
    // If we have space character
    if (unicodeIndex == 32) {
        // Just draw a 1x5 not filled column
        for (int i = 0; i < 5; i++) clear_pixel(displayXpos, i);          
        return  displayXpos + 1;   // Just avance 1 column
    }
    
    // The characters in the unicode table start from 1 not from 0
    // and in the C array they start from 0 !
    unicodeIndex--;
    
    // Get character lenght
    characterWidth = pgm_read_byte( &(FontLookup[unicodeIndex][5]) );
    
    // If this character is outside display just increment cursor position
    if (displayXpos < -8) {
        if (characterWidth != 0) return displayXpos + characterWidth;
        else return displayXpos + 3;
    }
    
    if (characterWidth != 0) {   
        PutHLine2ScreenBuffer(displayXpos, 0, characterWidth, pgm_read_byte(&(FontLookup[unicodeIndex][0])));
        PutHLine2ScreenBuffer(displayXpos, 1, characterWidth, pgm_read_byte(&(FontLookup[unicodeIndex][1])));
        PutHLine2ScreenBuffer(displayXpos, 2, characterWidth, pgm_read_byte(&(FontLookup[unicodeIndex][2])));
        PutHLine2ScreenBuffer(displayXpos, 3, characterWidth, pgm_read_byte(&(FontLookup[unicodeIndex][3])));
        PutHLine2ScreenBuffer(displayXpos, 4, characterWidth, pgm_read_byte(&(FontLookup[unicodeIndex][4])));
    } 
    else {
        // Just draw a 3x5 filled square if this character is undefined in FontLookup table
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 5; j++)
                set_pixel(displayXpos + i, j);
        return displayXpos + 3;
    }
    
    return displayXpos + characterWidth;
}

/*
int put_string(int posX, char s[])
{
    int pos = posX;
    unsigned int textLenght = 0;

    // Get text lenght    
    for (textLenght = 0; textLenght < 100; textLenght++) {  
        if (s[textLenght] == '\0') break;
    }
    
    for (int i = 0; i < textLenght; i++) pos = put_char(pos, s[i]);  
    
    // Return lenght in pixels of the string from the TEXT buffer
    return pos - posX;
}

void scroll_text(int speed, char s[])
{
    int pixelLenght = 0;
    
    // Print outside screen just to get string X dimension in pixels
    pixelLenght = put_string(17, s);
    
    for (int i=17; i>-pixelLenght; i--) {
        put_string(i, s);
        delay(speed);
        clear_screen();
    }	
}
*/
